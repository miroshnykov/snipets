// В выпуске TypeScript - фатальные ошибки!
// Был приведен ужасный пример

interface Book {
  price: number;
  pagesCount: number;

  author?: string;
}

// Нужно было сделать анаонимную книгу
// И это было реализовано так

type NonAnonymousBook_v1 = Required<Pick<Book, "author">> &
  Omit<Book, "author">;

// Так комбинировать утилиты бессмыслено!
// Можно сделать просто так

type NonAnonymousBook_v2 = Required<Book>;

/////////////////////////////////////////

// Но идея комбинации утилит для того, чтобы получить
// новый тип из старого правильна.

// Просто нужен более жизненный пример
// И вот он
// Допустим вам нужно получить тип неанонимной книги о машинах
// Уже есть интерфейс

interface Car {
  id: string;
  model: string;
  year: number;
}

// Тогда можно скомбинировать утилиты так
type CarBook = Required<Book> & Omit<Car, "model">;

// Вот такие ситуации, когда нужно связать два типа
// и что-то с ними сделать, довольно часта

// В комментариях справедливо заметили,
// что с увеличенем комбинаций страдает читабельность.

// И это так!

// Чтобы это поправить, можно создавать подтипы и сливать их.
// Как-то так:

type NonAnonymousBook = Required<Book>;
type CarModel = Omit<Car, "model">;

type CarBook_v2 = NonAnonymousBook & CarModel;

// Прошу прошения за фатальный косяк!